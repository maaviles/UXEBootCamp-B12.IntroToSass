// Let's get started with Sass!

// This is how you comment, but this won't show in the .css file!
/* you have to use css comments for your comment to show in the .css file */

// Getting started with sass:
// * ======================================
// terminal:
// sass --version (check your version of sass)
// sass --help (go to help menu to see other commends)
// sass --watch . (tells to watch at current dir)
// sass --watch <file name.scss> (watch a particular file)


// Nesting
// * ======================================

// .entry{
//   p {
//     background-color: blue;
//     color: whitesmoke;
//   }
//   h1 {
//     font-size: 30px;
//     color: blue;
//   }
//   a {
//     color: red;
//   }
// }

// Variables
// * ======================================

$maincolor: whitesmoke;
$secondcolor: darkblue;
$thirdcolor: tomato;

main {
  background: $thirdcolor;
  font-family: "Trebuchet MS", sans-serif;
  > h1 {
    font-size: 3em;
    color: $maincolor;
  }
}

.entry{
  width: 75%;
  margin: 0 auto;
  p {
    background-color: $secondcolor;
    color: $maincolor;
  }
  h1 {
    font-size: 1.5em;
    color: $secondcolor;
  }
  a {
    color: $thirdcolor;
  }
}

// Basic Mixins
// * ======================================

@mixin cheese($radius-one, $radius-two) {
  border-radius: $radius-one;
  border-color: $secondcolor;
  border-top-right-radius: $radius-two;
  border-bottom-left-radius: $radius-two;
}

@mixin color-links($a-color) {
  a {
    color: $a-color;
    &:hover {
      color: $maincolor;
    }
  }
}

aside {
  margin: 0 auto;
  @include cheese(.1em, .4em);
  @include color-links(green);
}

button {
  @include cheese(.3em, .2em);
  background: $maincolor;
}

// @extend - like mixins but you can't pass arguments!
// * ======================================

%bar {
  height: 20px;
  width: 100%;
  > div {
    float: left;
  }
}

nav {
  @extend %bar;
  background-color: $maincolor;
}

// @functions - like mixins except functions will return a value! yay math!
// ** Use functions when you need to calculate a value that may be reused somewhere else **
// * ======================================

@function my-calc($some-number, $another-number){
  @return $some-number + $another-number
}

@function calc-perc($target, $container) {
  @return ($target / $container) * 100%;
}

.module {
  padding: my-calc(5px, 10px);
  width: calc-perc(400px, 700px);
}

// Interpolation and if/else loops
// Other Control directives @if, @for, @each and @while
// * ======================================

@mixin color_class($color) {
  .#{$color} {
    color: $color;
    background: url("images/#{$color}.jpg") no-repeat;
    @if $color == red {
      border: 1px solid black;
    }
  }
}

@mixin randoMix($width) {
  @if $width > 100px {
    padding: 0px;
  }
  @else {
    padding: 20px;
  }
}

@include color_class(blue);
@include color_class(red);
@include color_class(yellow);
@include color_class(green);

.block {
  @include randoMix(200px);
}
.div {
  @include randoMix(10px);
}

// more examples

$boolean: true !default;

@mixin simple {
  @if $boolean {
    @debug "boolean is #{$boolean}";
    display: block;
  }
  @else {
    @debug "boolean is #{$boolean}";
    display: none;
  }
}

.meep {
  @include simple;
}

// @for example

$moop: for;

// I take variable i and go from 1 all the way through 50
@for $i from 1 through 50 {
  .#{$moop}-#{$i} {
    width: 60px + $i;
  }
}

// omg you can build useless gradients! pretty cool though. who the hell knew about the color whitesmoke...
.box {
  width: 100%;
  height: 20px;
}

$exColor: white;

@for $i from 1 through 11 {
  .box:nth-child(#{$i}) {
    background: darken($exColor, $i);
  }
}


// Handy tips
// * ======================================

// use the @debug and @warn to print messages to the console. this can come in handy for complex mixins and functions
